version: '3.9'

services:

  postgres:
    container_name: postgres
    image: debezium/postgres:15-alpine
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - ./postgres/init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=postgres
    networks:
      - tsm

  kafka:
    restart: always
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9092"]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka:29093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_NODE_ID: 1
      CLUSTER_ID: "iQsUL1SRTUbIdzWbBMmhVg=="
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    networks:
      - tsm

  debezium:
    container_name: debezium
    image: debezium/connect:2.3
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
    networks:
      - tsm

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - tsm

  zipkin:
    image:  openzipkin/zipkin:3.0.3
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - tsm
    command: --logging.level.zipkin2=TRACE

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    restart: on-failure
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    networks:
      - tsm

  grafana:
    image: grafana/grafana:10.0.2
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/
      -  grafana_data:/var/lib/grafana
    networks:
      - tsm

  postgres-exporter:
    container_name: postgres-exporter
    image: wrouesnel/postgres_exporter:v0.8.0
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres:5432/?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=postgres
    depends_on:
      - postgres
    restart: always
    ports:
      - "9187:9187"
    networks:
      - tsm

  elasticsearch:
    image: elastic/elasticsearch:8.9.1
    container_name: elasticsearch
    restart: always
    ports:
      - '9200:9200'
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xmx512m -Xms512m
      node.name: es01
      cluster.name: elasticsearch
      xpack.security.transport.ssl.enabled: false
      xpack.security.http.ssl.enabled: false
      ELASTIC_PASSWORD: password
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    healthcheck:
      test: "curl -s http://elasticsearch:9200 >/dev/null || exit 1"
      interval: 30s
      timeout: 10s
      retries: 50

    networks:
      - tsm

  api-gateway:
    image: gestanestle/api-gateway:3.0
    container_name: api-gateway
    links:
      - eureka
    restart: always
    ports:
      - "9000:9000"
    networks:
      - tsm
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka

  eureka:
    image: gestanestle/eureka3.0
    container_name: eureka
    networks:
      - tsm
    ports:
      - "8761:8761"
    restart: always

  account-service:
    image: gestanestle/account:3.0
    container_name: account-service
    ports:
      - "8084:8084"
    networks:
      - tsm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - eureka
    restart: always
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - POSTGRES_HOSTNAME=postgres
    healthcheck:
      test: "curl --fail --silent localhost:8084/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

  event-command-service:
    image: gestanestle/event-command:3.0
    container_name: event-command-service
    ports:
      - "8081:8081"
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - tsm
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - eureka
    restart: always
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - POSTGRES_HOSTNAME=postgres

  event-indexer-service:
    image: gestanestle/event-indexer:3.0
    container_name: event-indexer-service
    networks:
      - tsm
    depends_on:
      elasticsearch:
        condition: service_healthy
    links:
      - eureka
    restart: always
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - ELASTICSEARCH_HOSTNAME=elasticsearch
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092

  event-query-service:
    image: gestanestle/event-query:3.0
    container_name: event-query-service
    ports:
      - "8080:8080"
    networks:
      - tsm
    depends_on:
      elasticsearch:
        condition: service_healthy
    links:
      - eureka
    restart: always
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - ELASTICSEARCH_HOSTNAME=elasticsearch

  notification-service:
    image: gestanestle/notification:3.0
    container_name: notification-service
    networks:
      - tsm
    depends_on:
      kafka:
        condition: service_healthy
    links:
      - eureka
    restart: always
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
      - SERVERS_ACCOUNT-SERVICE=http://account-service:8084
      - SERVERS_EVENT-SERVICE=http://event-query-service:8080

  ticket-service:
    image: gestanestle/ticket:3.0
    container_name: ticket-service
    ports:
      - "8082:8082"
    networks:
      - tsm
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - eureka
    restart: always
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - POSTGRES_HOSTNAME=postgres
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

networks:
  tsm:
    name: tsm

volumes:
  postgres_data:
    name: postgres_data
  elastic_data:
    name: elastic_data
  prometheus_data:
    name: prometheus_data
  grafana_data:
    name: grafana_data